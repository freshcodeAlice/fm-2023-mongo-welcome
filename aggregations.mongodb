/*
Агрегаційний конвейер - певні операції над даними, які організовані за принципом конвейера (чейнінга в js) - результат опрацювання попереднього етапу передається наступному

Наприклад:
для того, щоб порахувати суму значень по кожній групі документів, нам потрібно:
1 етап - згрупувати
2 етап - порахувати значення по кожній групі


Один етап - одна операція

*/

db.createCollection('manufacturer', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name'],
            properties: {
                name: {
                    bsonType: 'string',
                },
                address: {
                    bsonType: 'object',
                    required: ['country', 'city']
                }
            }
        }
    }
});


db.manufacturer.insertMany([{
    name: 'Apple',
    address: {
        country: 'USA',
        city: 'New-York'
    }
}, {
    name: 'Sony',
    address: {
        country: 'China',
        city: 'Pekin'
    }
}, {
    name: 'Samsung'
}]);

db.products.drop();

db.createCollection('products', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name', 'price', 'amount'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                price: {
                    bsonType: 'double'
                },
                amount: {
                    bsonType: 'int'
                },
                expiredDate: {
                    bsonType: 'date'
                },
                manufacturerId: {
                    bsonType: "objectId"
                }
            }
        }
    }
});


db.products.insertMany([{
    name: 'iPhone',
    price: 200.50,
    amount: 20,
    expiredDate: new Date(),
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef18")
}, {
    name: 'S10',
    price: 100.50,
    amount: 20,
    expiredDate: new Date(),
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef19")
},{
    name: '40S',
    price: 3300.50,
    amount: 20,
    expiredDate: new Date(),
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef18")
},{
    name: 'iPad',
    price: 1344.50,
    amount: 20,
    expiredDate: new Date(),
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef19")
},{
    name: 'A23',
    price: 30.50,
    amount: 20,
    expiredDate: new Date(),
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef18")
},{
    name: 'M20',
    price: 100.50,
    amount: 20,
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef18")
},{
    name: 'P34',
    price: 200.50,
    amount: 20
},{
    name: 'Tel1',
    price: 400.50,
    amount: 20,
    manufacturerId: new ObjectId("64992dbf77f4bcc01d07ef19")
}]);


db.products.find();


db.products.insertOne({
    name: 'Supertel',
    price: 500.50,
    amount: 20,
    manufacturerId: new ObjectId("34f2e45ab89123d98ab89432")
});

/*
.aggregate() завжди приймає масив об'єктів
кожен об'єкт в цьому масиві представляє етап агрегації (тобто, операцію, яку ми робимо над даними)

*/

db.manufacturer.find();


db.products.aggregate([{
    $lookup: {
        from: 'manufacturer',
        localField: 'manufacturerId',
        foreignField: '_id',
        as: 'manuf'
    }
}]);

// Products + manufacturer
/*
$lookup: {
    from: колекція, яку ми джойнимо до початкової (на якій працює агрегація)
    localField: назва поля в початковій колекції
    foreignField: назва поля в зджойненій колекції
    as: псевдонім для поля-результату
}

*/


/*
SELECT список_вибірки
FROM таблиця1
JOIN таблиця2
ON (умова співставлення таблиць)

таблиця1.поле = таблиця2.інше_поле

*/

/// Прибираємо зайве і розпаковуємо []

db.products.aggregate([{
    $lookup: {
        from: 'manufacturer',
        localField: 'manufacturerId',
        foreignField: '_id',
        as: 'manuf'
    }
}, {
    $unwind: {
        path: "$manuf"
    }
}, {
    $unset: "manufacturerId"
}]);


/* Aggregations 

Задача: порахувати кількість позицій товарів по кожному виробнику
*/

db.products.aggregate([{
    $lookup: {
        from: 'manufacturer',
        localField: 'manufacturerId',
        foreignField: '_id',
        as: 'manuf'
    }
}, {
    $unwind: {
        path: "$manuf"
    }
}, {
    $unset: "manufacturerId"
}, {
    $group: {
        _id: "$manuf.name",
        countPositions: {
            $count: {}
        }
    }
}]);


/// Залишки товарів по кожному виробнику

db.products.aggregate([{
    $lookup: {
        from: 'manufacturer',
        localField: 'manufacturerId',
        foreignField: '_id',
        as: 'manuf'
    }
}, {
    $unwind: {
        path: "$manuf"
    }
}, {
    $unset: "manufacturerId"
}, {
    $group: {
        _id: "$manuf.name",
        countAmounts: {
            $sum: "$amount"
        }
    }
}]);

//// Сортування та ліміт


db.products.aggregate([{
    $lookup: {
        from: 'manufacturer',
        localField: 'manufacturerId',
        foreignField: '_id',
        as: 'manuf'
    }
}, {
    $unwind: {
        path: "$manuf"
    }
}, {
    $unset: "manufacturerId"
}, {
    $sort: {
        price: -1
    }
}]);



db.products.find().limit(5);